// This file is generated by omniidl (C++ backend) - omniORB_4_1. Do not edit.

#include "imProcessPort.hh"

OMNI_USING_NAMESPACE(omni)

static const char* _0RL_dyn_library_version = omniORB_4_1_dyn;

static ::CORBA::TypeCode::_Tracker _0RL_tcTrack(__FILE__);

static CORBA::PR_structMember _0RL_structmember_RTC_mTime[] = {
  {"sec", CORBA::TypeCode::PR_ulong_tc()},
  {"nsec", CORBA::TypeCode::PR_ulong_tc()}
};

#ifdef _0RL_tc_RTC_mTime
#  undef _0RL_tc_RTC_mTime
#endif
static CORBA::TypeCode_ptr _0RL_tc_RTC_mTime = CORBA::TypeCode::PR_struct_tc("IDL:RTC/Time:1.0", "Time", _0RL_structmember_RTC_mTime, 2, &_0RL_tcTrack);

static CORBA::PR_structMember _0RL_structmember_RTC_mCameraImage[] = {
  {"tm", _0RL_tc_RTC_mTime},
  {"width", CORBA::TypeCode::PR_ushort_tc()},
  {"height", CORBA::TypeCode::PR_ushort_tc()},
  {"bpp", CORBA::TypeCode::PR_ushort_tc()},
  {"format", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)},
  {"fDiv", CORBA::TypeCode::PR_double_tc()},
  {"pixels", CORBA::TypeCode::PR_sequence_tc(0, CORBA::TypeCode::PR_octet_tc(), &_0RL_tcTrack)}
};

#ifdef _0RL_tc_RTC_mCameraImage
#  undef _0RL_tc_RTC_mCameraImage
#endif
static CORBA::TypeCode_ptr _0RL_tc_RTC_mCameraImage = CORBA::TypeCode::PR_struct_tc("IDL:RTC/CameraImage:1.0", "CameraImage", _0RL_structmember_RTC_mCameraImage, 7, &_0RL_tcTrack);







static CORBA::TypeCode_ptr _0RL_tc_ComImProcess_mMultiImage = CORBA::TypeCode::PR_alias_tc("IDL:ComImProcess/MultiImage:1.0", "MultiImage", CORBA::TypeCode::PR_array_tc(4, _0RL_tc_RTC_mCameraImage, &_0RL_tcTrack), &_0RL_tcTrack);


const CORBA::TypeCode_ptr ComImProcess::_tc_MultiImage = _0RL_tc_ComImProcess_mMultiImage;

const CORBA::TypeCode_ptr _tc_ComImProcess = CORBA::TypeCode::PR_interface_tc("IDL:ComImProcess:1.0", "ComImProcess", &_0RL_tcTrack);

static void _0RL_ComImProcess_mMultiImage_marshal_fn(cdrStream& _s, void* _v)
{
  ComImProcess::MultiImage_slice* _a = (ComImProcess::MultiImage_slice*)_v;
  {
    for (_CORBA_ULong _0i0 = 0; _0i0 < 4; _0i0++){
      (const RTC::CameraImage&) _a[_0i0] >>= _s;
    }
  }

}
static void _0RL_ComImProcess_mMultiImage_unmarshal_fn(cdrStream& _s, void*& _v)
{
  ComImProcess::MultiImage_slice* _a = ComImProcess::MultiImage_alloc();
  {
    for (_CORBA_ULong _0i0 = 0; _0i0 < 4; _0i0++){
      (RTC::CameraImage&)_a[_0i0] <<= _s;
    }
  }

  _v = _a;
}
static void _0RL_ComImProcess_mMultiImage_destructor_fn(void* _v)
{
  ComImProcess::MultiImage_slice* _a = (ComImProcess::MultiImage_slice*)_v;
  ComImProcess::MultiImage_free(_a);
}

void operator<<=(::CORBA::Any& _a, const ComImProcess::MultiImage_forany& _s)
{
  ComImProcess::MultiImage_slice* _v;
  if (!_s.NP_nocopy())
    _v = ComImProcess::MultiImage_dup(_s);
  else
    _v = _s.NP_getSlice();

  _a.PR_insert(_0RL_tc_ComImProcess_mMultiImage,
               _0RL_ComImProcess_mMultiImage_marshal_fn,
               _0RL_ComImProcess_mMultiImage_destructor_fn,
               _v);
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, ComImProcess::MultiImage_forany& _s)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_ComImProcess_mMultiImage,
                    _0RL_ComImProcess_mMultiImage_unmarshal_fn,
                    _0RL_ComImProcess_mMultiImage_marshal_fn,
                    _0RL_ComImProcess_mMultiImage_destructor_fn,
                    _v)) {
    _s = (ComImProcess::MultiImage_slice*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_ComImProcess_marshal_fn(cdrStream& _s, void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  omniObjRef::_marshal(_o, _s);
}
static void _0RL_ComImProcess_unmarshal_fn(cdrStream& _s, void*& _v)
{
  omniObjRef* _o = omniObjRef::_unMarshal(ComImProcess::_PD_repoId, _s);
  _v = _o;
}
static void _0RL_ComImProcess_destructor_fn(void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  if (_o)
    omni::releaseObjRef(_o);
}

void operator<<=(::CORBA::Any& _a, ComImProcess_ptr _o)
{
  ComImProcess_ptr _no = ComImProcess::_duplicate(_o);
  _a.PR_insert(_tc_ComImProcess,
               _0RL_ComImProcess_marshal_fn,
               _0RL_ComImProcess_destructor_fn,
               _no->_PR_getobj());
}
void operator<<=(::CORBA::Any& _a, ComImProcess_ptr* _op)
{
  _a.PR_insert(_tc_ComImProcess,
               _0RL_ComImProcess_marshal_fn,
               _0RL_ComImProcess_destructor_fn,
               (*_op)->_PR_getobj());
  *_op = ComImProcess::_nil();
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, ComImProcess_ptr& _o)
{
  void* _v;
  if (_a.PR_extract(_tc_ComImProcess,
                    _0RL_ComImProcess_unmarshal_fn,
                    _0RL_ComImProcess_marshal_fn,
                    _0RL_ComImProcess_destructor_fn,
                    _v)) {
    omniObjRef* _r = (omniObjRef*)_v;
    if (_r)
      _o = (ComImProcess_ptr)_r->_ptrToObjRef(ComImProcess::_PD_repoId);
    else
      _o = ComImProcess::_nil();
    return 1;
  }
  return 0;
}

