// This file is generated by omniidl (C++ backend) - omniORB_4_1. Do not edit.

#include "pcProcessPort.hh"

OMNI_USING_NAMESPACE(omni)

static const char* _0RL_dyn_library_version = omniORB_4_1_dyn;

static ::CORBA::TypeCode::_Tracker _0RL_tcTrack(__FILE__);

static CORBA::PR_structMember _0RL_structmember_RTC_mTime[] = {
  {"sec", CORBA::TypeCode::PR_ulong_tc()},
  {"nsec", CORBA::TypeCode::PR_ulong_tc()}
};

#ifdef _0RL_tc_RTC_mTime
#  undef _0RL_tc_RTC_mTime
#endif
static CORBA::TypeCode_ptr _0RL_tc_RTC_mTime = CORBA::TypeCode::PR_struct_tc("IDL:RTC/Time:1.0", "Time", _0RL_structmember_RTC_mTime, 2, &_0RL_tcTrack);

static CORBA::PR_structMember _0RL_structmember_RTC_mPoint3D[] = {
  {"x", CORBA::TypeCode::PR_double_tc()},
  {"y", CORBA::TypeCode::PR_double_tc()},
  {"z", CORBA::TypeCode::PR_double_tc()}
};

#ifdef _0RL_tc_RTC_mPoint3D
#  undef _0RL_tc_RTC_mPoint3D
#endif
static CORBA::TypeCode_ptr _0RL_tc_RTC_mPoint3D = CORBA::TypeCode::PR_struct_tc("IDL:RTC/Point3D:1.0", "Point3D", _0RL_structmember_RTC_mPoint3D, 3, &_0RL_tcTrack);

static CORBA::PR_structMember _0RL_structmember_RTC_mRGBColour[] = {
  {"r", CORBA::TypeCode::PR_double_tc()},
  {"g", CORBA::TypeCode::PR_double_tc()},
  {"b", CORBA::TypeCode::PR_double_tc()}
};

#ifdef _0RL_tc_RTC_mRGBColour
#  undef _0RL_tc_RTC_mRGBColour
#endif
static CORBA::TypeCode_ptr _0RL_tc_RTC_mRGBColour = CORBA::TypeCode::PR_struct_tc("IDL:RTC/RGBColour:1.0", "RGBColour", _0RL_structmember_RTC_mRGBColour, 3, &_0RL_tcTrack);

static CORBA::PR_structMember _0RL_structmember_RTC_mPointCloudPoint[] = {
  {"point", _0RL_tc_RTC_mPoint3D},
  {"colour", _0RL_tc_RTC_mRGBColour}
};

#ifdef _0RL_tc_RTC_mPointCloudPoint
#  undef _0RL_tc_RTC_mPointCloudPoint
#endif
static CORBA::TypeCode_ptr _0RL_tc_RTC_mPointCloudPoint = CORBA::TypeCode::PR_struct_tc("IDL:RTC/PointCloudPoint:1.0", "PointCloudPoint", _0RL_structmember_RTC_mPointCloudPoint, 2, &_0RL_tcTrack);

static CORBA::TypeCode_ptr _0RL_tc_RTC_mPointCloudPointList = CORBA::TypeCode::PR_alias_tc("IDL:RTC/PointCloudPointList:1.0", "PointCloudPointList", CORBA::TypeCode::PR_sequence_tc(0, _0RL_tc_RTC_mPointCloudPoint, &_0RL_tcTrack), &_0RL_tcTrack);


static CORBA::PR_structMember _0RL_structmember_RTC_mPointCloud[] = {
  {"tm", _0RL_tc_RTC_mTime},
  {"points", _0RL_tc_RTC_mPointCloudPointList}
};

#ifdef _0RL_tc_RTC_mPointCloud
#  undef _0RL_tc_RTC_mPointCloud
#endif
static CORBA::TypeCode_ptr _0RL_tc_RTC_mPointCloud = CORBA::TypeCode::PR_struct_tc("IDL:RTC/PointCloud:1.0", "PointCloud", _0RL_structmember_RTC_mPointCloud, 2, &_0RL_tcTrack);
















static CORBA::TypeCode_ptr _0RL_tc_ComPcProcess_mMultiPointCloud = CORBA::TypeCode::PR_alias_tc("IDL:ComPcProcess/MultiPointCloud:1.0", "MultiPointCloud", CORBA::TypeCode::PR_array_tc(4, _0RL_tc_RTC_mPointCloud, &_0RL_tcTrack), &_0RL_tcTrack);


const CORBA::TypeCode_ptr ComPcProcess::_tc_MultiPointCloud = _0RL_tc_ComPcProcess_mMultiPointCloud;

static CORBA::TypeCode_ptr _0RL_tc_ComPcProcess_mplate__info = CORBA::TypeCode::PR_alias_tc("IDL:ComPcProcess/plate_info:1.0", "plate_info", CORBA::TypeCode::PR_array_tc(10, CORBA::TypeCode::PR_array_tc(10, CORBA::TypeCode::PR_float_tc(), &_0RL_tcTrack), &_0RL_tcTrack), &_0RL_tcTrack);


const CORBA::TypeCode_ptr ComPcProcess::_tc_plate_info = _0RL_tc_ComPcProcess_mplate__info;

static CORBA::TypeCode_ptr _0RL_tc_ComPcProcess_mMatrix4X4F = CORBA::TypeCode::PR_alias_tc("IDL:ComPcProcess/Matrix4X4F:1.0", "Matrix4X4F", CORBA::TypeCode::PR_array_tc(4, CORBA::TypeCode::PR_array_tc(4, CORBA::TypeCode::PR_float_tc(), &_0RL_tcTrack), &_0RL_tcTrack), &_0RL_tcTrack);


const CORBA::TypeCode_ptr ComPcProcess::_tc_Matrix4X4F = _0RL_tc_ComPcProcess_mMatrix4X4F;

const CORBA::TypeCode_ptr _tc_ComPcProcess = CORBA::TypeCode::PR_interface_tc("IDL:ComPcProcess:1.0", "ComPcProcess", &_0RL_tcTrack);

static void _0RL_ComPcProcess_mMultiPointCloud_marshal_fn(cdrStream& _s, void* _v)
{
  ComPcProcess::MultiPointCloud_slice* _a = (ComPcProcess::MultiPointCloud_slice*)_v;
  {
    for (_CORBA_ULong _0i0 = 0; _0i0 < 4; _0i0++){
      (const RTC::PointCloud&) _a[_0i0] >>= _s;
    }
  }

}
static void _0RL_ComPcProcess_mMultiPointCloud_unmarshal_fn(cdrStream& _s, void*& _v)
{
  ComPcProcess::MultiPointCloud_slice* _a = ComPcProcess::MultiPointCloud_alloc();
  {
    for (_CORBA_ULong _0i0 = 0; _0i0 < 4; _0i0++){
      (RTC::PointCloud&)_a[_0i0] <<= _s;
    }
  }

  _v = _a;
}
static void _0RL_ComPcProcess_mMultiPointCloud_destructor_fn(void* _v)
{
  ComPcProcess::MultiPointCloud_slice* _a = (ComPcProcess::MultiPointCloud_slice*)_v;
  ComPcProcess::MultiPointCloud_free(_a);
}

void operator<<=(::CORBA::Any& _a, const ComPcProcess::MultiPointCloud_forany& _s)
{
  ComPcProcess::MultiPointCloud_slice* _v;
  if (!_s.NP_nocopy())
    _v = ComPcProcess::MultiPointCloud_dup(_s);
  else
    _v = _s.NP_getSlice();

  _a.PR_insert(_0RL_tc_ComPcProcess_mMultiPointCloud,
               _0RL_ComPcProcess_mMultiPointCloud_marshal_fn,
               _0RL_ComPcProcess_mMultiPointCloud_destructor_fn,
               _v);
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, ComPcProcess::MultiPointCloud_forany& _s)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_ComPcProcess_mMultiPointCloud,
                    _0RL_ComPcProcess_mMultiPointCloud_unmarshal_fn,
                    _0RL_ComPcProcess_mMultiPointCloud_marshal_fn,
                    _0RL_ComPcProcess_mMultiPointCloud_destructor_fn,
                    _v)) {
    _s = (ComPcProcess::MultiPointCloud_slice*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_ComPcProcess_mplate__info_marshal_fn(cdrStream& _s, void* _v)
{
  ComPcProcess::plate_info_slice* _a = (ComPcProcess::plate_info_slice*)_v;
  if (! _s.marshal_byte_swap()) {
    _s.put_octet_array((_CORBA_Octet*)(_a),400,omni::ALIGN_4);
  }
  else 
  {
    _s.declareArrayLength(omni::ALIGN_4, 400);
    for (_CORBA_ULong _0i0 = 0; _0i0 < 10; _0i0++){
      for (_CORBA_ULong _0i1 = 0; _0i1 < 10; _0i1++){
        _a[_0i0][_0i1] >>= _s;
      }
    }
  }

}
static void _0RL_ComPcProcess_mplate__info_unmarshal_fn(cdrStream& _s, void*& _v)
{
  ComPcProcess::plate_info_slice* _a = ComPcProcess::plate_info_alloc();
  _s.unmarshalArrayFloat((_CORBA_Float*)(_a), 100);

  _v = _a;
}
static void _0RL_ComPcProcess_mplate__info_destructor_fn(void* _v)
{
  ComPcProcess::plate_info_slice* _a = (ComPcProcess::plate_info_slice*)_v;
  ComPcProcess::plate_info_free(_a);
}

void operator<<=(::CORBA::Any& _a, const ComPcProcess::plate_info_forany& _s)
{
  ComPcProcess::plate_info_slice* _v;
  if (!_s.NP_nocopy())
    _v = ComPcProcess::plate_info_dup(_s);
  else
    _v = _s.NP_getSlice();

  _a.PR_insert(_0RL_tc_ComPcProcess_mplate__info,
               _0RL_ComPcProcess_mplate__info_marshal_fn,
               _0RL_ComPcProcess_mplate__info_destructor_fn,
               _v);
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, ComPcProcess::plate_info_forany& _s)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_ComPcProcess_mplate__info,
                    _0RL_ComPcProcess_mplate__info_unmarshal_fn,
                    _0RL_ComPcProcess_mplate__info_marshal_fn,
                    _0RL_ComPcProcess_mplate__info_destructor_fn,
                    _v)) {
    _s = (ComPcProcess::plate_info_slice*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_ComPcProcess_mMatrix4X4F_marshal_fn(cdrStream& _s, void* _v)
{
  ComPcProcess::Matrix4X4F_slice* _a = (ComPcProcess::Matrix4X4F_slice*)_v;
  if (! _s.marshal_byte_swap()) {
    _s.put_octet_array((_CORBA_Octet*)(_a),64,omni::ALIGN_4);
  }
  else 
  {
    _s.declareArrayLength(omni::ALIGN_4, 64);
    for (_CORBA_ULong _0i0 = 0; _0i0 < 4; _0i0++){
      for (_CORBA_ULong _0i1 = 0; _0i1 < 4; _0i1++){
        _a[_0i0][_0i1] >>= _s;
      }
    }
  }

}
static void _0RL_ComPcProcess_mMatrix4X4F_unmarshal_fn(cdrStream& _s, void*& _v)
{
  ComPcProcess::Matrix4X4F_slice* _a = ComPcProcess::Matrix4X4F_alloc();
  _s.unmarshalArrayFloat((_CORBA_Float*)(_a), 16);

  _v = _a;
}
static void _0RL_ComPcProcess_mMatrix4X4F_destructor_fn(void* _v)
{
  ComPcProcess::Matrix4X4F_slice* _a = (ComPcProcess::Matrix4X4F_slice*)_v;
  ComPcProcess::Matrix4X4F_free(_a);
}

void operator<<=(::CORBA::Any& _a, const ComPcProcess::Matrix4X4F_forany& _s)
{
  ComPcProcess::Matrix4X4F_slice* _v;
  if (!_s.NP_nocopy())
    _v = ComPcProcess::Matrix4X4F_dup(_s);
  else
    _v = _s.NP_getSlice();

  _a.PR_insert(_0RL_tc_ComPcProcess_mMatrix4X4F,
               _0RL_ComPcProcess_mMatrix4X4F_marshal_fn,
               _0RL_ComPcProcess_mMatrix4X4F_destructor_fn,
               _v);
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, ComPcProcess::Matrix4X4F_forany& _s)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_ComPcProcess_mMatrix4X4F,
                    _0RL_ComPcProcess_mMatrix4X4F_unmarshal_fn,
                    _0RL_ComPcProcess_mMatrix4X4F_marshal_fn,
                    _0RL_ComPcProcess_mMatrix4X4F_destructor_fn,
                    _v)) {
    _s = (ComPcProcess::Matrix4X4F_slice*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_ComPcProcess_marshal_fn(cdrStream& _s, void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  omniObjRef::_marshal(_o, _s);
}
static void _0RL_ComPcProcess_unmarshal_fn(cdrStream& _s, void*& _v)
{
  omniObjRef* _o = omniObjRef::_unMarshal(ComPcProcess::_PD_repoId, _s);
  _v = _o;
}
static void _0RL_ComPcProcess_destructor_fn(void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  if (_o)
    omni::releaseObjRef(_o);
}

void operator<<=(::CORBA::Any& _a, ComPcProcess_ptr _o)
{
  ComPcProcess_ptr _no = ComPcProcess::_duplicate(_o);
  _a.PR_insert(_tc_ComPcProcess,
               _0RL_ComPcProcess_marshal_fn,
               _0RL_ComPcProcess_destructor_fn,
               _no->_PR_getobj());
}
void operator<<=(::CORBA::Any& _a, ComPcProcess_ptr* _op)
{
  _a.PR_insert(_tc_ComPcProcess,
               _0RL_ComPcProcess_marshal_fn,
               _0RL_ComPcProcess_destructor_fn,
               (*_op)->_PR_getobj());
  *_op = ComPcProcess::_nil();
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, ComPcProcess_ptr& _o)
{
  void* _v;
  if (_a.PR_extract(_tc_ComPcProcess,
                    _0RL_ComPcProcess_unmarshal_fn,
                    _0RL_ComPcProcess_marshal_fn,
                    _0RL_ComPcProcess_destructor_fn,
                    _v)) {
    omniObjRef* _r = (omniObjRef*)_v;
    if (_r)
      _o = (ComPcProcess_ptr)_r->_ptrToObjRef(ComPcProcess::_PD_repoId);
    else
      _o = ComPcProcess::_nil();
    return 1;
  }
  return 0;
}

